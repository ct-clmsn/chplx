// This program file was generated by the chplx compiler.
// The original Chapel program file can be found here: fn.chpl
//
#include <hpx/hpx_init.hpp>
#include <hpx/program_options.hpp>

#include "fn_driver.hpp"

bool chplx_fork_join_executor = false;

hpx::execution::experimental::fork_join_executor* exec = nullptr;
int chplx_fork_join_executor_yield_delay = 100;    //ns
using namespace fn;

int hpx_main(int argc, char* argv[])
{
    fn::__this->__main();
    return hpx::finalize();
}

int main(int argc, char* argv[])
{
    chplx::registerModule<fn::__thisModule>();
    bool help = false;
    hpx::program_options::options_description options;
    options.add_options()("help", hpx::program_options::bool_switch(&help),
        "config var help: bool")("chplx-fork-join-executor",
        hpx::program_options::bool_switch(&::chplx_fork_join_executor),
        "config var chplx_fork_join : bool")(
        "chplx-fork-join-executor-yield-delay",
        hpx::program_options::value(&::chplx_fork_join_executor_yield_delay),
        "config var chplx_fork_join_yield_delay : int");
    hpx::program_options::variables_map vm;
    auto parser = hpx::program_options::command_line_parser(argc, argv)
                      .options(options)
                      .allow_unregistered()
                      .run();
    hpx::program_options::store(parser, vm);
    hpx::program_options::notify(vm);
    if (help)
    {
        std::cout << options << std::endl;
        return 1;
    }
    return hpx::init(argc, argv);
}
