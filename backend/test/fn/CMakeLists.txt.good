#
# This program file was generated by the chplx compiler.
# The original Chapel program file can be found here: "fn.chpl"
#
cmake_minimum_required(VERSION 3.19)
if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE Debug CACHE STRING "Configuration type" FORCE)
endif()

project(fn)

add_executable(fn fn.cpp fn_driver.cpp)

set(CMAKE_CXX_STANDARD 20)
set(CXX_EXTENSIONS OFF)
set(CMAKE_CXX_STANDARD_REQUIRED YES)

include(CheckCXXCompilerFlag)
check_cxx_compiler_flag("-march=native" HAS_MARCH_NATIVE)

if(NOT Chplx_DIR)
  message(FATAL_ERROR "Chplx_DIR variable undefined")
endif()

set_property(GLOBAL PROPERTY USE_FOLDERS ON)

find_package(fmt REQUIRED CONFIG)
find_package(HPX REQUIRED CONFIG)
find_package(Chplx REQUIRED CONFIG)

# pick the right “inline‐limit” flag
if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
  set(INLINE_LIMIT_FLAG "-finline-limit=1000")
elseif (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
  # clang uses an LLVM pass‐through flag
  set(INLINE_LIMIT_FLAG "-mllvm" "-inline-threshold=1000")
else()
  set(INLINE_LIMIT_FLAG "")
endif()

# only pass -march=native if supported
if (HAS_MARCH_NATIVE)
  set(MARCH_FLAG "-march=native")
else()
  set(MARCH_FLAG "")
endif()

target_link_libraries(fn PUBLIC fmt::fmt-header-only HPX::hpx Chplx::library)
set(CMAKE_CXX_FLAGS
    "${CMAKE_CXX_FLAGS} ${MARCH_FLAG} ${INLINE_LIMIT_FLAG} -flto")
