diff --git a/frontend/CMakeLists.txt b/frontend/CMakeLists.txt
index d4248b70e9..6301e3fab3 100644
--- a/frontend/CMakeLists.txt
+++ b/frontend/CMakeLists.txt
@@ -15,7 +15,11 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
-
+set(CHPL_MAJOR_VERSION 2)
+set(CHPL_MINOR_VERSION 3)
+set(CHPL_PATCH_VERSION 0)
+set(CHPL_BUILD_VERSION 0)
+set(CHPL_OFFICIAL_RELEASE false)
 # CHPL_HOME may have been defined by an upstream CMakeLists.txt, so check if
 # it doesn't exist before trying to create it.
 if (NOT DEFINED CHPL_HOME)
@@ -76,15 +80,18 @@ set(CHPL_INCLUDE_DIR      ${CMAKE_CURRENT_BINARY_DIR}/include)
 configure_file(${CHPL_MAIN_INCLUDE_DIR}/chpl/config/config.h.cmake
                ${CHPL_INCLUDE_DIR}/chpl/config/config.h)
 
-
 # request C++17
-set(CMAKE_CXX_STANDARD 17)
+set(CMAKE_CXX_STANDARD 20)
+set(CXX_EXTENSIONS OFF)
 set(CMAKE_CXX_STANDARD_REQUIRED True)
 
 # request C11
 set(CMAKE_C_STANDARD 11)
 set(CMAKE_C_STANDARD_REQUIRED True)
 
+find_package(LLVM REQUIRED CONFIG)
+find_package(Clang REQUIRED CONFIG)
+
 # generate the compile_commands.json compilation database
 # tools like the fieldsUsed linter require this
 set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
@@ -128,15 +135,16 @@ endif()
 
 # lib/CMakeLists.txt defines the target ChplFrontend
 add_subdirectory(lib)
+
 # Support for documentation of AST header
 add_subdirectory(doc)
 # Utils like C++ linters for this codebase
 add_subdirectory(util)
 
 # check for test directory and add tests if it exists (won't exist in release tarball)
-if (IS_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/test")
-  # Support for C++ compiler unit tests
-  # Needs to happen in this file for ctest to work in this dir
-  enable_testing()
-  add_subdirectory(test)
-endif()
+# if (IS_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/test")
+#   # Support for C++ compiler unit tests
+#   # Needs to happen in this file for ctest to work in this dir
+#   enable_testing()
+#   add_subdirectory(test)
+# endif()
diff --git a/frontend/include/chpl/framework/Context.h b/frontend/include/chpl/framework/Context.h
index 33ee4190e2..9787eff363 100644
--- a/frontend/include/chpl/framework/Context.h
+++ b/frontend/include/chpl/framework/Context.h
@@ -1078,6 +1078,15 @@ class Context {
     size_t depth = 0;
     bool enableQueryTimingTrace = false;
 
+    explicit ReportOnExit(Context *ctx = nullptr,
+                          querydetail::QueryMapBase *base_ = nullptr,
+                          const std::tuple<ArgTs...> *tup = nullptr,
+                          bool enableQueryTiming_ = false, size_t dep = 0,
+                          bool enableQueryTimingTrace_ = false)
+        : context(ctx), base(base_), tupleOfArgs(tup),
+          enableQueryTiming(enableQueryTiming_), depth(dep),
+          enableQueryTimingTrace(enableQueryTimingTrace_) {}
+
     ReportOnExit(const ReportOnExit& rhs) = delete;
     ReportOnExit(ReportOnExit&& rhs) = default;
     ReportOnExit& operator=(const ReportOnExit& rhs) = delete;
diff --git a/frontend/lib/CMakeLists.txt b/frontend/lib/CMakeLists.txt
index d39352c04b..01ca7ea40d 100644
--- a/frontend/lib/CMakeLists.txt
+++ b/frontend/lib/CMakeLists.txt
@@ -15,6 +15,9 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
+set(CMAKE_CXX_STANDARD 20)
+set(CXX_EXTENSIONS OFF)
+set(CMAKE_CXX_STANDARD_REQUIRED True)
 
 # generate a git-version.cpp file during the cmake configure step.
 # If one exists, the write-git-sha script will only update it if the
@@ -27,19 +30,33 @@ if (EXISTS ${CMAKE_SOURCE_DIR}/.git AND Git_FOUND)
                           ${CMAKE_CURRENT_SOURCE_DIR}/util
                           --build-version
                           --chpl-home=${CHPL_HOME}
-                          )
-  message(VERBOSE "wrote git-version.cpp")
-elseif(NOT EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/util/git-version.cpp)
-# if we are not in a git repo, or the git binary doesn't exist on this machine,
-# write a git-version.cpp file (if one doesn't exist) as if CHPL_DONT_BUILD_SHA
-# was set so we dont try to execute the git command
-  execute_process(COMMAND ${CMAKE_COMMAND} -E env CHPL_DONT_BUILD_SHA=1
-                          ${CHPL_CMAKE_PYTHON}
-                          ${CMAKE_SOURCE_DIR}/util/config/write-git-sha
-                          ${CMAKE_CURRENT_SOURCE_DIR}/util
-                          --build-version
-                          --chpl-home=${CHPL_HOME})
-  message(VERBOSE "wrote git-version.cpp with dummy sha")
+                          RESULT_VARIABLE rv)
+  message(STATUS "wrote git-version.cpp ${rv}")
+endif()
+if(NOT EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/util/git-version.cpp)
+  if (EXISTS ${CMAKE_SOURCE_DIR}/.git AND Git_FOUND)
+    execute_process(COMMAND ${CHPL_CMAKE_PYTHON}
+                            ${CMAKE_SOURCE_DIR}/util/config/write-git-sha
+                            ${CMAKE_CURRENT_SOURCE_DIR}/util
+                            --build-version
+                            --chpl-home=${CHPL_HOME}
+                    RESULT_VARIABLE rv)
+                    message(STATUS "wrote git-version.cpp ${rv}")
+  else()
+  # if we are not in a git repo, or the git binary doesn't exist on this machine,
+  # write a git-version.cpp file (if one doesn't exist) as if CHPL_DONT_BUILD_SHA
+  # was set so we dont try to execute the git command
+    execute_process(COMMAND ${CMAKE_COMMAND} -E env CHPL_DONT_BUILD_SHA=1
+                            ${CHPL_CMAKE_PYTHON}
+                            ${CMAKE_SOURCE_DIR}/util/config/write-git-sha
+                            ${CMAKE_CURRENT_SOURCE_DIR}/util
+                            --build-version
+                            --chpl-home=${CHPL_HOME}
+                    RESULT_VARIABLE rv)
+    message(STATUS "wrote git-version.cpp with dummy sha ${rv}")
+  endif()
+else()
+  message(STATUS "Found ${CMAKE_CURRENT_SOURCE_DIR}/util/git-version.cpp")
 endif()
 
 add_library(git-sha-obj OBJECT ${CMAKE_CURRENT_SOURCE_DIR}/util/git-version.cpp)
@@ -54,12 +71,18 @@ set_property(TARGET ChplFrontend-obj PROPERTY POSITION_INDEPENDENT_CODE 1)
 
 # Include the public library .h files as well as any generated .h files
 target_include_directories(ChplFrontend-obj PUBLIC
+                           ${LLVM_INCLUDE_DIRS}
+                           ${CLANG_INCLUDE_DIRS}
                            ${CHPL_MAIN_INCLUDE_DIR}
                            ${CHPL_INCLUDE_DIR})
 
 # Library code can also use headers from the lib/ directory
 # but these are not to be public
-target_include_directories(ChplFrontend-obj PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})
+target_include_directories(ChplFrontend-obj PRIVATE
+                          ${CMAKE_CURRENT_SOURCE_DIR}
+                          ${LLVM_INCLUDE_DIRS}
+                          ${CLANG_INCLUDE_DIRS}
+)
 
 # SHELL: is needed here to remove unwanted quotes from the list of arguments
 # COMPILE_LANGUAGE:CXX is needed here to make sure we only set the flags
@@ -97,7 +120,7 @@ add_library(ChplFrontendShared SHARED
 set(CHPL_FRONTEND_INCLUDES ${CHPL_MAIN_INCLUDE_DIR} ${CHPL_INCLUDE_DIR})
 target_include_directories(ChplFrontend PUBLIC ${CHPL_FRONTEND_INCLUDES})
 target_include_directories(ChplFrontendShared PUBLIC ${CHPL_FRONTEND_INCLUDES})
-
+set(CHPL_LLVM_LINK_ARGS "LLVM")
 if (CHPL_LLVM_STATIC_DYNAMIC STREQUAL "static")
   if(APPLE)
     if (CHPL_LLVM_VERSION VERSION_LESS 14.0)
diff --git a/frontend/lib/resolution/InitResolver.h b/frontend/lib/resolution/InitResolver.h
index b67a31c738..15317712ae 100644
--- a/frontend/lib/resolution/InitResolver.h
+++ b/frontend/lib/resolution/InitResolver.h
@@ -42,7 +42,6 @@ class InitResolver {
     types::QualifiedType qt;
     UniqueString name;
     bool isInitialized;
-    FieldInitState() = default;
   };
 
   enum Phase {
